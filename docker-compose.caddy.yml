
services:
  # Existing services (using existing docker-compose.yml as base)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: socialmedia
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d
    ports:
      - "127.0.0.1:5432:5432"  # Only expose to localhost
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - social_media_network

  backend:
    build: ./server
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: socialmedia
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/socialmedia?sslmode=disable
      SESSION_SECRET: ${SESSION_SECRET:-your-secret-key-here}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      # Add domain for CORS and other configs
      DOMAIN: live.ecitizen.media
      ALLOWED_ORIGINS: https://live.ecitizen.media,https://www.live.ecitizen.media
    ports:
      - "127.0.0.1:5000:5000"  # Only expose to localhost
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./server/uploads:/app/uploads
      - ./client/build:/app/client/build
    networks:
      - social_media_network

  frontend:
    build: ./client
    environment:
      - REACT_APP_API_URL=https://live.ecitizen.media
      - REACT_APP_WS_URL=wss://live.ecitizen.media
      - REACT_APP_DOMAIN=live.ecitizen.media
    ports:
      - "127.0.0.1:3000:3000"  # Only expose to localhost
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - social_media_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"  # Only expose to localhost
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - social_media_network

  # Caddy reverse proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: social_media_caddy
    restart: unless-stopped
    ports:
      - "80:80"     # HTTP (for ACME challenge and redirects)
      - "443:443"   # HTTPS
      - "443:443/udp"  # HTTP/3
      - "127.0.0.1:2019:2019"  # Caddy admin API (localhost only)
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - CADDY_INGRESS_NETWORKS=social_media_network
    depends_on:
      - backend
      - frontend
    networks:
      - social_media_network
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database admin interface
  adminer:
    image: adminer:4
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"  # Only expose to localhost
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    depends_on:
      - postgres
    networks:
      - social_media_network

  # Optional: Redis admin interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8081"  # Only expose to localhost
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - social_media_network

  # Optional: Log monitoring
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:9000:9000"  # Only expose to localhost
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - social_media_network

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
  caddy_logs:
  portainer_data:

networks:
  social_media_network:
    driver: bridge